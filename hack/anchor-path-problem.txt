Problem: anchor path abbreviations are not working

Using

   smlnj/smlnj repository, branch newpp

working directory = ~/sml/Dev/github/smlnj/system
      .
running

   cmb with ../../smlnj1/bin/sml,

where ../../smlnj1 (github/smlnj1) is a separate clone of smlnj/smlnj on the main branch.
that has successfully bootstrapped itself in smlnj1/system.

The system/pathconfig and config/extrapathconfig files are the same in
smlnj[newpp] and smlnj1[main].

There are 27 file differences between smlnj/cm and smlnj1/cm
(i.e. between the newpp and main versions of cm), and I have checked
all those differences and as far as I can tell they are minor and
should not affect the interpretation of anchor path abbreviations like
"$/basis.cm".  The controls-lib.cm file is as follows:

------------------------------
 (* controls-lib.cm
 *
 * COPYRIGHT (c) 2019 The Fellowship of SML/NJ (http://www.smlnj.org)
 * All rights reserved.
 *
 * An implementation of "controls" -- representing environment-configurable
 * global state (flags, options, ...) of a program.
 *
 * author: Matthias Blume
 *)

Library

  signature CONTROLS
  structure Controls
  signature CONTROL_SET
  structure ControlSet
  signature CONTROL_REGISTRY
  structure ControlRegistry
  signature CONTROL_UTIL
  structure ControlUtil

is

#if defined(NEW_CM)
  $/basis.cm
  $/smlnj-lib.cm
#else
  ../Util/smlnj-lib.cm
#endif

  control-reps.sml
  controls-sig.sml
  controls.sml
  control-registry-sig.sml
  control-registry.sml
  control-set-sig.sml
  control-set.sml
  control-util-sig.sml
  control-util.sml
------------------------------

Everything was working 3 days ago (smlnj[newpp] could bootstap itself
repeatedly). I made some changes to CM to try to simplify its controls
(cm/util/stdcfg.sml) using a simplified intermediary abstraction for
creating controls, and something I changed seems to have broken cm so
that anchor path abbreviations like "$/basis.cm" no longer work. I
backed out those changes and tried rebooting the compiler, but the
problem persisted. I tried booting from the smlnj1/bin/sml version of
sml, but even then the problem perists, as shown by the transcript
below.

Other changes that _might_ be relevant (but I don't see how):

1. bypassing the proxy cm files in system/smlnj/viscomp, using
   corresponding paths starting with the $compiler anchor 
   (e.g. $smlnj/viscomp/basics.cm -> $compiler/Basics/basics.cm).

2. All "components" (meaning top-level subdirectories of compiler)
   have their own CDFs (cm description files). Collections of these
   are used in place of core.cm where it was uses, and core.cm is no
   longer needed and was removed. This means I am avoiding using the
   "proxy" CDFs in system/smlnj/viscomp.

   I am also not using the system/smlnj/internal/srcpath-lib.cm proxy, and
   instead I refer to that library (now not a Group) using the more direct
   anchor path $cm/paths/srcpath-lib.cm. I don't see how avoiding the use of
   the proxy CDF could be related to this problem.

3. A few uniform name changes like Control_Print -> PrintControl, and some
   minor reogranization of the control structure Control
   (TopLevel/main/control.{sig,sml}).
   
4. There are some intentional mistakes in the cm sources (like bogus names
   in a couple of places instead of "PrintControl"). But these don't cause
   errors when running cmb-make or $SMLNJ/build.sh, leading me to believe that
   there must be old cm binaries that are persisting through bootstrap cycles
   and causing the cm sources to not be compiled. I tried to delete these
   by deleting all the .cm directories in $SMLNJ/cm and some I found in system/smlnj
   (in cm, cmb, internal), but I am not confident that I got rid of them all.

5. But note that the problem arrises even when running the smlnj1 [main] version
   of the sml command (~/sml/Dev/github/smlnj1/bin/sml).

6. I do not understand how the anchor environment is set up, and what role the
   system/pathconfig and config/extrapathconfig file play in defining the anchor
   environment. But those files haven't changed ($/basis.cm seems to be defined in
   config/extrapathconfig).

7. A quick fix for this particular case (in controls-lib.cm) is to replace
   "$/basis.cm" with the anchor path "$smlnj/basis/basis.cm", which works (so
   somehow the $smlnj anchor is defined). But there are many other files that
   display the problem, and for various anchor path abbreviations, like
   "$/smlnj-lib.cm", "$/regexp-lib.cm" and "$/ml-lpt-lib.cm".  The anchors for
   the latter two, $regexp-lib.cm" and "$ml-lpt-lib.cm" may be defined in the
   lib/pathconfig file ($CM_PATHCONFIG) that is generated by $SMLNJ/build.sh
   by entries

     regexp-lib.cm regexp-lib.cm
     
     ml-lpt-lib.cm ml-lpt-lib.cm

   in lib/pathconfig, but I don't understand how these "definitions" work (where
   is the associated file path?)

8. My last attempt to resolve the problem will be go create a fresh clone of
   the smlnj/smlnj repository, switch it to the newpp branch, and then see if I
   can compile it using the sml command built from the main branch (smlnj1/bin/sml).
   
9. The error message and the BadAnchor exception are generated in the get_free function
   of srcpath.sml (line 435), which looks up an anchor name (a string) in the
   anchor environment.  I haven't figured out where the "$/" abbreviation is supposed
   to be expanded.


Suggestions of what to look at for the next steps of debugging this would be
appreciated.  I have an urgent need to get back to a bootstrappable sml.

--------------------------------------------------------------------------------
transcript
--------------------------------------------------------------------------------

hoy$ pwd
/Users/dbm/sml/Dev/github/smlnj/system   -- newpp branch
hoy$ ./cmb-make ../../smlnj1/bin/sml
: adding '/Users/dbm/sml/Dev/github/smlnj1/bin' to PATH
Standard ML of New Jersey [Version 2022.1; 64-bit; August 25, 2022]
- *** WARNING: no access to Div exception
*** WARNING: no access to Div exception
*** WARNING: no access to Div exception
*** WARNING: no access to Div exception
*** WARNING: no access to Div exception
*** WARNING: no access to Div exception
*** WARNING: no access to Div exception
smlnj/init/target64-inline.sml:47.5-47.47 Warning: rebinding "=" is not allowed
smlnj/init/target64-inline.sml:140.9-140.57 Warning: rebinding "=" is not allowed
smlnj/init/target64-inline.sml:191.9-191.65 Warning: rebinding "=" is not allowed
smlnj/init/target64-inline.sml:219.9-219.65 Warning: rebinding "=" is not allowed
smlnj/init/target64-inline.sml:48.39-48.48 Warning: calling polyEqual
smlnj/init/target64-inline.sml:47.39-47.47 Warning: calling polyEqual
smlnj/init/pre-perv.sml:27.5-27.55 Warning: rebinding "=" is not allowed
smlnj/init/pre-perv.sml:28.47-28.57 Warning: calling polyEqual
smlnj/init/pre-perv.sml:27.46-27.55 Warning: calling polyEqual
smlnj/init/substring.sig:8.5-8.22 Warning: rebinding "=" is not allowed
smlnj/init/substring.sig:8.5-8.22 Warning: calling polyEqual
smlnj/init/substring.sig:8.5-8.22 Warning: calling polyEqual
smlnj/init/pervasive.sml:143.1-143.18 Warning: rebinding "=" is not allowed
smlnj/init/pervasive.sml:143.1-143.18 Warning: calling polyEqual
smlnj/init/pervasive.sml:143.1-143.18 Warning: calling polyEqual
Basis/Implementation/IO/text-io-fn.sml:787.23 Warning: calling polyEqual
Basis/Implementation/Sockets/socket.sml:169.43 Warning: calling polyEqual
Basis/Implementation/Unix/unix.sml:137.14 Warning: calling polyEqual
Basis/Implementation/Unix/unix.sml:140.15 Warning: calling polyEqual
Basis/Implementation/fn.sml:63.27-63.29 Warning: calling polyEqual
Basis/Implementation/fn.sml:61.24 Warning: calling polyEqual
$Stabilize: wrapping the following privileges:
  primitive
 Warning: $SMLNJ-BASIS/basis.cm: uses non-anchored path
  The path specifying library $SMLNJ-BASIS/basis.cm:basis-common.cm is
  relative.
  (This means that in order to be able to use the stabilized library
  $SMLNJ-BASIS/basis.cm, it will be necessary to keep all imported libraries
  with names derived from or equal to $SMLNJ-BASIS/basis.cm:basis-common.cm in
  the same relative location as they are now.)
../smlnj-lib/Util/int-redblack-map.sml:87.8-87.33 Warning: binding not exhaustive
          T (_,a,yk,y,b) = ...
../smlnj-lib/Util/int-redblack-map.sml:130.8-130.33 Warning: binding not exhaustive
          T (_,a,yk,y,b) = ...
../smlnj-lib/Util/redblack-set-fn.sml:96.8-96.29 Warning: binding not exhaustive
          T (_,a,y,b) = ...
../smlnj-lib/Util/Target64Bit/random.sml:117.17-117.91 Warning: binding not exhaustive
          SOME (magic',rest) = ...
../smlnj-lib/Util/Target64Bit/random.sml:121.26-121.28 Warning: calling polyEqual
../smlnj-lib/Util/int-redblack-set.sml:105.8-105.29 Warning: binding not exhaustive
          T (_,a,y,b) = ...
../smlnj-lib/Util/redblack-map-fn.sml:82.8-82.33 Warning: binding not exhaustive
          T (_,a,yk,y,b) = ...
../smlnj-lib/Util/redblack-map-fn.sml:134.8-134.33 Warning: binding not exhaustive
          T (_,a,yk,y,b) = ...
../smlnj-lib/Util/word-redblack-map.sml:87.8-87.33 Warning: binding not exhaustive
          T (_,a,yk,y,b) = ...
../smlnj-lib/Util/word-redblack-map.sml:130.8-130.33 Warning: binding not exhaustive
          T (_,a,yk,y,b) = ...
../smlnj-lib/Util/int-list-map.sml:127.21 Warning: calling polyEqual
../smlnj-lib/Util/word-redblack-set.sml:105.8-105.29 Warning: binding not exhaustive
          T (_,a,y,b) = ...
/Users/dbm/sml/Dev/github/smlnj/smlnj-lib/Controls/controls-lib.cm:26.3-26.13 Error: anchor $basis.cm not defined

uncaught exception BadAnchor
  raised at: ../cm/paths/srcpath.sml:443.16-443.25
             ../cm/tools/main/private-tools.sml:542.6-548.13
             ../cm/util/safeio.sml:41.55
             ../cm/util/safeio.sml:41.55
             ../cm/parse/parse.sml:332.33-502.47
             ../cm/parse/parse.sml:361.49-377.19
             ../cm/util/safeio.sml:41.55
             ../cm/parse/parse.sml:332.33-502.47
             ../cm/parse/parse.sml:361.49-377.19
             ../cm/util/safeio.sml:41.55
             ../cm/parse/parse.sml:332.33-502.47
             ../cm/parse/parse.sml:361.49-377.19
             ../cm/util/safeio.sml:41.55
             ../cm/parse/parse.sml:332.33-502.47
             ../cm/util/safeio.sml:41.55
             ../cm/bootstrap/btcompile.sml:172.28-419.47
- 
