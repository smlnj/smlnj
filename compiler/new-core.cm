(* core.cm
 *
 * COPYRIGHT (c) 2020 The Fellowship of SML/NJ (http://www.smlnj.org)
 * All rights reserved.
 *
 * This is the machine-independent "core" part of the compiler
 * (but without the parser and elaborator data structures).
 * Machine-dependent parts are in backend-<arch>.cm.
 *
 * The parser is in Parse/parser.cm.
 * Elaborator data structures are in ElabData/elabdata.cm.
 * Basic definitions are in Basics/basics.cm.
 *
 * The present file is a group which gets referred to by the actual library
 * file in system/smlnj/viscomp/core.cm.
 *)

Group
	signature BACKEND

	(* To be able to separate machine-dependent parts of viscomp-lib.cm
	 * from machine-independent parts, we must also export the
	 * the following things.... *)

	signature MACH_SPEC
	functor DefaultMachSpecFn

        functor BackendFn

        functor CodeGeneratorFn

	structure FLINTOpt

	(* stuff that lived (or should have) in Frontend (aka GenericVC) *)
	structure Control   (* TopLevel/main/control.sml *)
	structure ArithOps
	structure Primop
	structure PrimopBind
	structure PrimopBindings
	structure PrimEnv
	structure Environment
	structure EnvRef
	structure ModuleId
	structure GenModIdMap

	structure PickMod
	structure UnpickMod
	structure Rehash
	structure PickleSymPid
	structure UnpickleSymPid

	structure CompilerPPTable
	structure PrintHooks
	structure SMLNJVersion
	structure CoreSym
	structure FLINT

        (* ElabData structures - from $smlnj/viscomp/elabdata.cm *)
        structure Types         (* types/types.sml *)
        structure EntityEnv     (* modules/entityenv.sml *)
        structure Modules       (* modules/modlules.sml *)
        structure Stamps        (* basics/stamps.sml *)
        structure Bindings      (* statenv/bindings.sml *)
        structure TypesUtil     (* types/typesutil.sml *)
        structure Variable      (* syntax/variable.sml *)
        structure ModuleUtil    (* modules/moduleutil.sml *)
	structure PrimopId      (* prim/primop-id.sml *)
        structure BasicTypes    (* types/basictypes.sml *)
        structure PPType        (* types/pptype.sml *)
        structure Access        (* basics/access.sml *)

        (* Elaborator structures - from $smlnj/viscomp/elaborate.cm *)
	structure Unify         (* types/unify.sml *)
	structure SigMatch      (* modules/sigmatch.sml *)

	structure PickleSymPid
	structure UnpickleSymPid
	structure PickMod
	structure UnpickMod
	structure Rehash

	structure PrimEnv

	(* corresponding signatures *)

	signature CONTROL      (* TopLevel/main/control.sig *)
	signature ENVIRONMENT
	signature PRIM_ENV
	signature ENVREF
	signature MODULE_ID

	signature PICKMOD
	signature UNPICKMOD

	signature PRIM_ENV

        (* FLINT signatures - from $smlnj/viscomp/flint.cm *)
	signature FLINT

        (* ElabData signatures - from $smlnj/viscomp/elabdata.cm *)
	signature TYPES         (* types/types.sig *)
	signature ENTITY_ENV    (* modules/entityenv.sig *)
	signature MODULES       (* modules/modlules.sig *)
	signature STAMPS        (* basics/stamps.sig *)
	signature BINDINGS      (* statenv/bindings.sig *)
	signature TYPESUTIL     (* types/typesutil.sig *)
	signature VARIABLE      (* syntax/variable.sig *)
	signature MODULEUTIL    (* modules/moduleutil.sig *)
	signature BASICTYPES    (* types/basictypes.sig *)
	signature PPTYPE        (* types/pptype.sig *)
	signature ACCESS        (* basics/access.sig *)

        (* Elaborator signatures - from $smlnj/viscomp/elaborate.cm *)
	signature UNIFY

	(* FLINT structures - from $smlnj/viscomp/flint.cm *)
	structure TransUtil
	structure Translate
	structure Lty
	structure LtyKindChk
	structure LtyKernel
	structure LtyDef
	structure LtyExtern
	structure PrimTyc
	structure PPLty
	structure PPFlint
	structure LContract
	structure Specialize
	structure LambdaVar
	structure ChkFlint

	structure DebIndex

	signature TARGET
	structure Target

(* new codegen structures *)
	structure CFG   (* NewCodeGen/cfg/cfg.sml *)
	structure PPCfg (* NewCodeGen/cfg/ppcfg.sml *)

is

TopLevel/environ/environ.sig
TopLevel/environ/environ.sml

TopLevel/interact/envref.sml
TopLevel/interact/evalloop.sig
TopLevel/interact/evalloop.sml
TopLevel/interact/interact.sig
TopLevel/interact/interact.sml

TopLevel/backend/backend.sig
TopLevel/backend/backend-fn.sml

TopLevel/main/control.sig
TopLevel/main/control.sml
TopLevel/main/cconfig.sig
TopLevel/main/code-generator.sig
TopLevel/main/compile.sig
TopLevel/main/compile.sml

TopLevel/print/ppdec.sml
TopLevel/print/ppobj.sml
TopLevel/print/pptable.sml
TopLevel/print/compilerpptable.sml
TopLevel/print/printhooks.sml

(* Semantic analysis (elaborator) specialized for SML/NJ. *)

(* pickling and unpickling *)
ElabData/pickle/pickle-sym-pid.sml
ElabData/pickle/unpickle-sym-pid.sml
ElabData/pickle/pickmod.sml
ElabData/pickle/unpickmod.sml
ElabData/pickle/rehash.sml

ElabData/prim/prim-env.sml

(* FLINT stuff moved to FLINT/flint.cm *)

(* CPS stuff moved to CPS/cps.cm *)

(* NewCodeGen *)
NewCodeGen/cfg/cfg.sml
NewCodeGen/cfg/ppcfg.sml
NewCodeGen/cfg/cfg-util.sml
NewCodeGen/cfg-pickle/cfg-pickle.sig
NewCodeGen/cfg-pickle/cfg-pickler.sml
NewCodeGen/cfg-pickle/cfg-file-pickle.sml
NewCodeGen/cfg-pickle/cfg-memory-pickle.sml
NewCodeGen/cfg-pickle/lambda-var-pickle.sml
(*
NewCodeGen/cps-to-cfg/cluster.sml
*)
NewCodeGen/cps-to-cfg/cps-info.sml
NewCodeGen/cps-to-cfg/invoke-gc.sml
NewCodeGen/cps-to-cfg/cps-to-cfg-fn.sml
NewCodeGen/cps-to-cfg/tagged-arith.sml
NewCodeGen/main/code-gen-fn.sml
NewCodeGen/main/mach-spec.sig
NewCodeGen/main/default-machspec-fn.sml
NewCodeGen/main/object-desc.sig
NewCodeGen/main/object-desc.sml

(* Miscellaneous utilities. *)
Library/const-arith/sources.cm

(* Libraries that are part of the visible compiler framework. *)
$smlnj/viscomp/basics.cm
$smlnj/viscomp/parser.cm
$smlnj/viscomp/elabdata.cm
$smlnj/viscomp/elaborate.cm
$smlnj/viscomp/debugprof.cm
$smlnj/viscomp/execute.cm
$smlnj/viscomp/flint.cm
$smlnj/viscomp/cps.cm

(* Other libaries. *)
$smlnj/basis/basis.cm

(* smlnj-lib *)
$smlnj/smlnj-lib/smlnj-lib.cm
$smlnj/smlnj-lib/controls-lib.cm
$smlnj/smlnj-lib/prettyprint-lib.cm

$smlnj/asdl/asdl-lib.cm
$/pickle-lib.cm

$smlnj/init/init.cmi : cm          (* to gain access at CoreIntInf *)

$smlnj/internal/smlnj-version.cm
