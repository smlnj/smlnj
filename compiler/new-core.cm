(* core.cm
 *
 * COPYRIGHT (c) 2023 The Fellowship of SML/NJ (http://www.smlnj.org)
 * All rights reserved.
 *
 * New reorganized version where TopLevel, CPS, FLINT, and NewCodeGen member specs have been
 * moved to corresponding local .cm files, e.g. TopLevel/toplevel.cm.
 * [DBM, 2023.2]
 *
 * This is the machine-independent "core" part of the compiler, (mostly) re-exporting modules
 * defined in the subsidiary component cm libraries (accessed via $smlnj/viscomp).
 * Machine-dependent parts are in backend-<arch>.cm.
 *
 * Subsidiary cm description files for top-level $SMLNJ/compiler directories:
 *   Parse/parser.cm          -- lexer and parser
 *   Basics/basics.cm         -- basic definitions
 *   ElabData/elabdata.cm     -- elaboration data structures
 *   Elaborator/elaborate.cm  -- elaboration (type checking, modules, etc.)
 *   FLINT/flint.cm           -- FLINT IR and optimizations
 *   CPS/cps.cm               -- CPS IR and optimizations
 *   NewCodeGen/newcodegen.cm -- Flow graph IR, optimization, and generating LLVM input
 *   TopLevel/toplevel.cm     -- interactive system, ...
 *
 * No modules are re-exported from parser.cm, so it is not imported.
 * 
 * So this represents basically a partial union of the exports of basics.cm, elabdata.cm,
 * flint.cm, cps.cm, newcodegen.cm, and toplevel.cm.
 *
 * The group defined here is used by the actual Library defined in the file
 * system/smlnj/viscomp/core.cm.
 *)

Group

	(* [old comment] To be able to separate machine-dependent parts of viscomp-lib.cm
	 * from machine-independent parts, we must also export the
	 * the following things.... *)

        (* <- $smlnj/internal/smlnj-version.cm *)
	structure SMLNJVersion    (* system/smlnj/internal/version.sml *)


        (* TopLevel <- $smlnj/viscomp/toplevel.cm *)
	structure Control         (* main/control.sml *)
	signature CONTROL         (* main/control.sig *)

	structure Environment     (* environ/environ.sml *)
	signature ENVIRONMENT     (* environ/environ.sig *)

	structure EnvRef          (* interact/envref.sml *)
	signature ENVREF          (* interact/envref.sml *)

	structure CompilerPPTable (* print/compilerpptable.sml *)
	structure PrintHooks      (* print/compilerpptable.sml *)

	signature BACKEND         (* backend/backend.sig *)
        functor BackendFn         (* backend/backend-fn.sml *)


        (* NewCodeGen <- $smlnj/viscomp/newcodegen.cm *)
	signature MACH_SPEC       (* main/mach-spec.sig *)
        functor CodeGeneratorFn   (* main/code-gen-fn.sml *)
	functor DefaultMachSpecFn (* main/default-machspec-fn.sml *)

	structure CFG             (* cfg/cfg.sml *)
	structure PPCfg           (* cfg/ppcfg.sml *)


        (* CPS -- anything to re-export from $smlnj/viscomp/cps.cm ? *)


        (* FLINT <- $smlnj/viscomp/flint.cm *)
	structure FLINTOpt        (* main/flint-opt.sml *)

	structure FLINT           (* flint/flint.sml *)
	signature FLINT           (* flint/flint.sig *)
	structure ChkFlint        (* flint/chkflint.sml *)
	structure PPFlint         (* flint/ppflint.sml *)

	structure TransUtil       (* trans/transutil.sml *)
	structure Translate       (* trans/translate.sml *)

	structure Lty             (* kernel/lty.sml *)
	structure LtyKindChk      (* kernel/ltykindchk.sml *)
	structure LtyKernel       (* kernel/ltykernel.sml *)
	structure LtyDef          (* kernel/ltydef.sml *)
	structure LtyExtern       (* kernel/ltyextern.sml *)
	structure PrimTyc         (* kernel/primtyc.sml *)
	structure PPLty           (* kernel/pplty.sml *)

	structure LContract       (* opt/lcontract.sml *)
	structure Specialize      (* opt/specialize.sml *)


        (* ElabData <- $smlnj/viscomp/elabdata.cm *)
        structure Stamps          (* basics/stamps.sml *)
	signature STAMPS          (* basics/stamps.sig *)
        structure Access          (* basics/access.sml *)
	signature ACCESS          (* basics/access.sig *)
	structure CoreSym         (* basics/coresym.sml *)
	structure LambdaVar       (* basics/lambdavar.sml *)
	structure DebIndex        (* basics/debindex.sml -- probably don't need *)

        structure Types           (* types/types.sml *)
	signature TYPES           (* types/types.sig *)
        structure TypesUtil       (* types/typesutil.sml *)
	signature TYPESUTIL       (* types/typesutil.sig *)
        structure BasicTypes      (* types/basictypes.sml *)
	signature BASICTYPES      (* types/basictypes.sig *)
        structure PPType          (* types/pptype.sml *)
	signature PPTYPE          (* types/pptype.sig *)

        structure EntityEnv       (* modules/entityenv.sml *)
	signature ENTITY_ENV      (* modules/entityenv.sig *)
        structure Modules         (* modules/modlules.sml *)
	signature MODULES         (* modules/modlules.sig *)
        structure ModuleUtil      (* modules/moduleutil.sml *)
	signature MODULEUTIL      (* modules/moduleutil.sig *)
	structure ModuleId        (* modules/moduleid.sml *)
	signature MODULE_ID       (* modules/moduleid.sml *)

        structure Variable        (* syntax/variable.sml *)
	signature VARIABLE        (* syntax/variable.sig *)

	structure ArithOps        (* prim/arithops.sml *)
	structure PrimopId        (* prim/primop-id.sml *)
	structure Primop          (* prim/primop.sml *)
	structure PrimopBind      (* prim/primop-bind.sml *)
	structure PrimopBindings  (* prim/primop-bindings.sml *)
	structure PrimEnv         (* prim/prim-env.sml *)
	signature PRIM_ENV        (* prim/prim-env.sml *)

        structure Bindings        (* statenv/bindings.sml *)
	signature BINDINGS        (* statenv/bindings.sig *)
	structure GenModIdMap     (* statenv/genmap.sml *)

	structure PickleSymPid    (* pickle/pickle-sym-pid.sml *)
	structure UnpickleSymPid  (* pickle/unpickle-sym-pid.sml *)
	structure PickMod         (* pickle/pickmod.sml *)
	signature PICKMOD         (* pickle/pickmod.sml *)
	structure UnpickMod       (* pickle/unpickmod.sml *)
	signature UNPICKMOD       (* pickle/unpickmod.sml *)
	structure Rehash          (* pickle/rehash.sml *)


        (* Elaborator <- $smlnj/viscomp/elaborate.cm *)
	structure Unify           (* types/unify.sml *)
	signature UNIFY           (* types/unify.sml *)
	structure SigMatch        (* modules/sigmatch.sml *)


        (* Basics <- $smlnj/viscomp/basics.cm *)
	signature TARGET          (* compiler/target.sig *)
	structure Target          (* compiler/target32.sml or target64.sml *)

is

(* ------------------------------- Members ------------------------------- *)

(* A (miscellaneous) utility. Why is this here? It's the only thing compiled by core.cm. *)
Library/const-arith/sources.cm

(* Moved:
   ElabData/pickle/*.sml, ElabData/prim/prim-env.sml --> elabdata.cm
   TopLevel/* --> TopLevel/toplevel.cm
   FLINT/* --> FLINT/flint.cm
   CPS/* --> CPS/cps.cm
   NewCodeGen/* --> NewCodeGen/newcodegen.cm

NOTE: There is a cyclical dependency between CPS and NewCodeGen (as Groups) must be fixed.
  As files (in core.cm), there is no cycle. So some files need to be moved, or possibly
  the distribution of files in CPS, NewCodeGen, and (possibly) TopLevel needs to be rethought.
*)


(* ------------------------------- Imports ------------------------------- *)

(* viscomp Libraries -- used for re-exports *)
$smlnj/viscomp/basics.cm
$smlnj/viscomp/elabdata.cm  (* now including ElabData/pickle and ElabData/prim/prim-env.sml *)
$smlnj/viscomp/elaborate.cm
$smlnj/viscomp/execute.cm
$smlnj/viscomp/flint.cm
$smlnj/viscomp/cps.cm  (* ?? what exports? what exports need to be re-exported here? *)
$smlnj/viscomp/toplevel.cm
$smlnj/viscomp/newcodegen.cm

(* Other libaries. *)
$smlnj/basis/basis.cm

(* smlnj-lib "incorporated" libraries *)
$smlnj/smlnj-lib/smlnj-lib.cm
$smlnj/smlnj-lib/controls-lib.cm
$smlnj/smlnj-lib/prettyprint-lib.cm

$smlnj/asdl/asdl-lib.cm  (* what needs this? *)

$smlnj/internal/smlnj-version.cm  (* SMLNJVersion *)

(* Moved:
   $/pickle-lib.cm                         -- moved to elabdata.cm imports
   $smlnj/init/init.cmi : cm  (CoreIntInf) -- moved to flint.cm imports
*)
