compiler/CPS/MAP-CPS.txt

Map of CPS (as a "library")

* Excluding use of modules from Basis (basis.cm) and smlnj-lib/Util (smlnj-lib.cm)
* Imports from outside the CPS library are indicated by an asterisk (e.g. LambdaVar*)
  [We assume import of basis.cm and smlnj-lib.cm.]
* All-caps identifiers are assumed to be signatures. Initial caps identifiers are assumed
  to be structures, unless they end in "Fn", in which case they are assumed to be functors.
  These defaults can be overridden by qualifiers, e.g. "CPS [str]".

CPS/

cps.cm  -- the CPS Group/Library CDF
[see also $smlnj/viscomp/cps.cm]

(* ---------------------------- Exports ---------------------------- *) 
   
  structure CPS        (cps/cps.sml)
  structure CPSUtil    (cps/cps-util.sml)
  structure PPCps      (cps/ppcps.sml)

  structure ObjectDesc (main/object-desc.sml)
  structure Cluster    (main/cluster.sml, for CodeGen) 
  signature MACH_SPEC  (main/mach-spec.sig, for CodeGen)
  functor CPSCompFn    (main/cps-comp.sml)

  What else needs to exported for what clients, after cyclical
  dependency between CPS and NewCodeGen (CPSCompFn) is fixed?)


(* ---------------------------- Module Index ---------------------------- *) 

LOCAL:  ["*" marks exported modules/signatures]

CPS [sig]	   cps/cps.sig
CPS* [str]         cps/cps.sml
CPSUtil*	   cps/cps-util.sml
PPCps*		   cps/ppcps.sml
CPSUtil		   cps/cps-util.sml

MACH_SPEC*         main/mach-spec.sig (?)
CPS_COMP	   main/cps-comp.sml
CPSCompFn* [fct]   main/cps-comp.sml
Cluster*   	   main/cluster.sml
NormalizeCluster   main/normalize-cluster.sml
Feedback	   main/feedback.sml
Limit		   main/limit.sml
LITERALS	   main/literals.sml 
Literals	   main/literals.sml 
NewLiterals	   main/new-literals.sml
SPILL		   main/spill-fn.sml
SpillFn		   main/spill-fn.sml
OBJECT_DESC	   main/object-desc.sig
ObjectDesc*	   main/object-desc.sml

GLOBALFIX	   clos/globalfix.sml
GlobalFix	   clos/globalfix.sml
CLOSURE		   clos/closure.sml
Closure [fct]	   clos/closure.sml
FREECLOSE	   clos/freeclose.sml
FreeClose	   clos/freeclose.sml
STATICPROF	   clos/staticprof.sml
StaticProf [fct]   clos/staticprof.sml
UNREBIND   	   clos/unrebind.sml
UnRebind	   clos/unrebind.sml

CONVERT		   convert/convert.sml
Convert [fct]	   convert/convert.sml
CPStrans [fct]	   convert/cpstrans.sml
Switch	 	   convert/switch.sml

CONTRACT	   opt/contract.sml
Contract	   opt/contract.sml
ContractPrim	   opt/contract-prim.sml
CPSOPT [sig]	   opt/cpsopt.sml
CPSopt [fct[	   opt/cpsopt.sml
DivCnv 		   opt/divcnv.sml
ETA		   opt/eta.sml
Eta		   opt/eta.sml
ETASPLIT	   opt/etasplit.sml
EtaSplit	   opt/etasplit.sml
EXPAND		   opt/expand.sml
Expand		   opt/expand.sml
FLATTEN		   opt/flatten.sml
Flatten [fct]	   opt/flatten.sml
IntInfCnv	   opt/infcnv.sml
LowerCPS	   opt/lower.sml
Num64Cnv	   opt/num64cnv.sml
StrEqlCnv	   opt/streqlcnv.sml
TestCnv		   opt/testcnv.sml
Uncurry [fct]	   opt/uncurry.sml

IMPORTED:

ErrorMsg           Basics/errormsg/errormsg.sml
Target		   Basics/compiler/target[32,64].sml
IntConst	   Basics/compiler/int-const.sml
RealConst	   Basics/compiler/real-const.sml

LambdaVar	   ElabData/basics/lambdavar.sml
Access		   ElabData/basics/access.sml
Primop		   ElabData/prim/primop.sml

PLambda		   FLINT/plambda/plambda.sml
FLINT [str]	   FLINT/flint/flint.sml
FlintUtil	   FLINT/flint/flintutil.sml
PrimTyc	   	   FLINT/kernel/primtyc.sml  
Lty	   	   FLINT/kernel/lty.sml  
LtyKernel   	   FLINT/kernel/ltykernel.sml  
LtyDef	   	   FLINT/kernel/ltydef.sml  
LtyBasic   	   FLINT/kernel/ltybasic.sml   
LtyExtern   	   FLINT/kernel/ltyextern.sml   
FunRecMeta  	   FLINT/kernel/funrecmeta.sml  

Control		   TopLevel/main/control.sml
Control_CG	   TopLevel/main/control.sml

ConstArith	   Library/const-arith/const-arith.sml


(* ---------------------------- Members [files] ---------------------------- *) 

CPS/

main/

  cluster.sml    [to be replaced (here) by improved version NCG/cps-to-cfg/cluster.sml when finished])
    < Cluster
    > CPS
      PPCps
      NormalizeCluster
      ----------------
      LambdaVar*
      Control*

  cps-comp.sml
    < CPS_COMP
      CPSCompFn
    > CPS [str]
      PPCps
      MACH_SPEC
      Cluster
      Spill [fct]
      Literals
      NewLiterals
      Limit
      Convert [fct]
      CPStrans [fct]
      CPSopt [fct]
      Closure [fct]
      GlobalFix
      ---------
      FLINT* [str]
      Control*
      LambdaVar*

      [former dependencies on modules defined in NCG (CodeGen):
       CPStoCFGFn* [fct]    NCG/cps-to-cfg/cps-to-cfg-fn.sml
       PPCfg*               NCG/cfg/ppcfg.sml
       CFGPickler*          NCG/cfg-pickle/cfg-pickler.sml
       -- these appeared in debugging code that is now commented out]

  feedback.sml
    < Feedback
    > LambdaVar*
      ErrorMsg*

  limit.sml
    < Limit
    > CPS [str]
      Cluster
      Feedback
      ----------
      LambdaVar*
      Control*
      ErrorMsg*
      Target*
      RealLit*

  literals.sml
    < LITERALS
      Literals
    > ----------
      LambdaVar*
      ErrorMsg*
      Control*

  new-literals.sml
    < NewLiterals
    > CPS [str]
      PPCps
      LITERALS
      ---------
      LambdaVar*
      Control*
      Target*
      ErrorMsg*
      RealConst*
      IntConst*

  normalize-cluster.sml
    < NormalizeCluster
    > CPS [str]
      ----------
      LambdaVar*
      ErrorMsg*

  spill-fn.sml
    < SPILL
      SpillFn
    > CPS [str]
      CPSUtil
      MACH_SPEC
      ----------
      LambdaVar*
      Control*
      Control_GC*
      ErrorMsg*
      Target*
      
  object-desc.sig
    < OBJECT_DESC
    >

  object-desc.sml
    < ObjectDesc
    > -------
      Target*

  mach-spec.sig
    < MACH_SPEC
    > OBJECT_DESC


CPS/clos/

  globalfix.sml
    < GLOBALFIX
      GlobalFix
    > CPS [str]

  closure.sml
    < CLOSURE
      Closure [fct]
    > CPS [str]
      MACH_SPEC 
      CPSUtil
      StaticProf [fct]
      ----------
      LambdaVar*
      Control*
      Target*

  freeclose.sml
    < FREECLOSE
      FreeClose
    > CPS [str]
      CPSUtil
      ----------
      LambdaVar*
      Access*
      Control*

  staticprof.sml
    < STATICPROF
      StaticProf [fct]
    > CPS [str]
      MACH_SPEC
      --------
      Control*

  unrebind.sml
    < UNREBIND
      UnRebind
    > CPS [str]
      ----------
      LambdaVar*
      ErrorMsg*

      
convert/

  convert.sml
    < CONVERT
      Convert [fct]
    > CPS [str]
      CPSUtil
      MACH_SPEC
      -------
      Access*
      LambdaVar*
      Lty*, LtyDef*, LtyBasic*, LtyExtern*, FunRecMeta*, FLINT*, FlintUtil*
      PLambda*
      Primop*

  cpstrans.sml
    < CPStrans [fct]
    > CPS [str]
      MACH_SPEC
      ----------
      LambdaVar*
      ErrorMsg*

  switch.sml
    < Switch
    > CPS [str]
      ----------
      LambdaVar*
      ErrorMsg*
      Access*
      FLINT*


cps/

  cps.sig
    < CPS [sig]
    > RealConst*
      IntConst*

  cps.sml
    < CPS [str]
    > RealConst*
      IntConst*

  ppcps.sml
    < PPCPS
      PPCps
    > CPS [str]
      CPSUtil
      ----------
      LambdaVar*
      Lty*
      Formatting*

  cps-util.sml
    < CPSUtil
    > CPS [str]
      ---------
      Lty*, LtyDef*, LtyBasic*, LtyKernel*, PrimTyc*
      ErrorMsg*
      Target*


CPS/opt/

  contract.sml
    < CONTRACT
      Contract
    > CPS [str]
      CPSUtil
      PPCps
      ----------
      LambdaVar*
      LtyBasic*
      ConstArith*
      Control*
      ErrorMsg*
      Target*

  contract-prim.sml
    < ContractPrim
    > CPS [str]
      CPSUtil
      PPCps
      -----------
      ConstArith*
      ErrorMsg*
      Target*

  cpsopt.sml 
    < CPSOPT
      CPSopt [fct]
    > CPS [str]
      Contract
      Flatten [fct]
      Uncurry [fct]
      Expand
      Eta
      EtaSplit
      PPCps
      MACH_SPEC
      ---------
      Control*

  divcnv.sml
    < DivCnv
    > CPS [str]
      ----------
      LambdaVar*
      ErrorMsg*
      Target*

  eta.sml
    < ETA
      Eta
    > CPS [str]
      ----------
      LambdaVar*
      Control*

  etasplit.sml
    < ETASPLIT
      EtaSplit
    > CPS [str]
      ----------
      LambdaVar*
      Control*

  expand.sml
    < EXPAND
      Expand
    > CPS [str]
      MACH_SPEC
      ----------
      LambdaVar*
      Control*
      ErrorMsg*

  flatten.sml
    < FLATTEN
      Flatten [fct]
    > CPS [str]
      MACH_SPEC
      ----------
      LambdaVar*
      Control*
      ErrorMsg*
      LtyExtern*

  infcnv.sml
    < IntInfCnv
    > CPS [str]
      TestCnv

  lower.sml
    < LowerCPS
    > CPS [str]
      Num64Cnv
      StrEqlCnv
      IntInfCnv
      TestCnv
      ----------
      LambdaVar*
      Target*
      ErrorMsg*

  num64cnv.sml
    < Num64Cnv
    > CPS [str]
      ----------
      LambdaVar*
      Target*
      ErrorMsg*

  streqlcnv.sml
    < StrEqlCnv
    > CPS [str]
      ----------
      LambdaVar*
      Target*
      ErrorMsg*
    
  testcnv.sml
    < TestCnv
    > CPS [str]
      ----------
      LambdaVar*
      Target*
      ErrorMsg*

  uncurry.sml
    < Uncurry [fct]
    > CPS [str]
      ETASPLIT
      MACH_SPEC
      ----------
      LambdaVar*
      ErrorMsg*
      Control*
      LtyDef*
      LtyBasic*

      

(* ---------------------------- Imports ---------------------------- *) 

  basics.cm:    Target, ErrorMsg, RealConst, IntConst
  elabdata.cm:  LambdaVar, Primop, Access
  flint.cm:     Lty, LtyDef, LtyBasic, LtyKernel, PrimTyc, FunRecMeta,
                PLambda, FLINT [str], FlintUtil
  toplevel.cm:  Control, Control_CG
  prettyprint-lib.cm: PrettyPrint
  Library/const-arith/sources.cm [core.cm]: ConstArith

  -- eliminated (circular) dependence on codegen.cm:
     (1) moved MACH_SPEC, OBJECT_DESC, ObjectDesc from NewCodeGen/main to CPS/main
     (2) edited CPS/main/cps-comp to comment out debugging code dependent on CFG
