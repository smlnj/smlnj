compiler/MAP-TL.txt

Map of compiler/TopLevel (as a "library")

* Excluding use of modules from Basis (basis.cm) and smlnj-lib/Util (smlnj-lib.cm)
* Imports from outside the CPS library are indicated by an asterisk (e.g. LambdaVar*)
  [We assume import of basis.cm and smlnj-lib.cm.] 
* All-caps identifiers are assumed to be signatures. Initial caps identifiers are assumed
  to be structures, unless they end in "Fn", in which case they are assumed to be functors.
  These defaults can be overridden by qualifiers, e.g. "CPS [str]".

TopLevel/

toplevel.cm  CDF for TopLevel Group/Library
  [see also $smlnj/viscomp/toplevel.cm (alias, conversion from Group to Library)]

(* ---------------------------- Exports ---------------------------- *) 
 
  signature CONTROL         (* main/control.sig *) 
  structure Control         (* main/control.sml *)

  signature ENVIRONMENT     (* environ/environ.sig *) 
  structure Environment     (* environ/environ.sml *)

  signature ENVREF          (* interact/envref.sml *) 
  structure EnvRef          (* interact/envref.sml *)

  structure CompilerPPTable (* print/compilerpptable.sml *)
  structure PrintHooks      (* print/printhooks.sml *)

  signature BACKEND         (* backend/backend.sig *)
  functor BackendFn         (* backend/backend-fn.sml *)


(* ---------------------------- Members ---------------------------- *)

TopLevel/environ/

  environ.sig
    < ENVIRONMENT
    > 

  environ.sml
    < Environment
    > Access*      elabdata.cm (ElabData/basics/access.sml)
      Symbol*      basics.cm (Basics/symbol/symbol.sml)
      Modules*	   elabdata.cm
      Variable*    elabdata.cm
      Types*       elabdata.cm
      ModuleUtil*  elabdata.cm
      Bindings*    elabdata.cm (ElabData/statenv/bindings.sml)
      StaticEnv*   elabdata.cm (ElabData/statenv/statenv.sml)
      DynamicEnv*  execute.cm (Execution/dynenv/dynenv.sml)
      ErrorMsg*    basics.cm
      PersMap*     basics.cm (Basics/pid/persmap.sml)
      Control*     toplevel.cm

TopLevel/interact/

  envref.sml
    < ENVREF
      EnvRef
    > Symbol*      basics.cm
      StaticEnv*   elabdata.cm 
      [PropList    smlnj-lib/Util]

      Environment (TopLevel/environ/environ.sml)

  evalloop.sig
    < EVALLOOP
    > Symbol*      basis.cm
      Ast*         parser.cm

      EnvRef  (TopLevel/interact/envref.sml) 

  evalloop.sml
    < EvalLoopF [fct]
    > Symbol*      basics.cm
      ErrorMsg*    basics.cm
      CompileExn*  basics.cm (Basics/compiler/compileexn.sml)
      Source*      basics.cm (Basics/source/source.sml)
      Ast*         parser.cm 
      PPAst*       parser.cm
      SmlFile*     parser.cm (Parse/main/smlfile.sml) 
      PPAbsyn*     elabdata.cm 
      StaticEnv*   elabdata.cm 
      ElabDebug*   elaborator.cm
      Isolate*     execute.cm (Execution/main/isolate.sml)
      Execute*     execute.cm (Execution/main/execute.sml)
      [General     basis.cm] 

      Environment  (TopLevel/environ/environ.sml) 
      Control      (TopLevel/main/control.sml)
      TOP_COMPILE  (TopLevel/main/compile.sig)

  interact.sig
    < INTERACT
    > Ast*         parser.cm
      Symbol*      basics.cm
      [SMLofNJ     basis.cm]

      Environment  (TopLevel/environ/environ.sml) 
      EnvRef       (TopLevel/interact/envref.sml) 

  interact.sml
    < Interact [fct]
    > ErrorMsg*    basics.cm
      [SMLofNJ, OS     basis.cm]

      INTERACT
      EVALLOOP
      Environment  (TopLevel/environ/environ.sml) 
      EnvRef       (TopLevel/interact/envref.sml) 
      Control      (TopLevel/main/control.sml


TopLevel/backend/

  backend.sig
    < BACKEND
    > PROFILE*     debugprof.cm (DebugProf/profile/profile.sig)

      COMPILE      (TopLevel/main/compile.sig)
      INTERACT     (TopLevel/interact/interact.sig)

  backend-fn.sml
    < BackendFn
    > PersStamps*  basics.cm (Basics/pid/persstamps.sml)
      Stamps*      elabdata.cm (ElabData/basics/stamps.sml)
      PickMod*     elabdata.cm (ElabData/pickle/pickmod.sml)
      UnpickMod*   elabdata.cm (ElabData/pickle/unpickmod.sml)
      GenModIdMap* elabdata.cm (ElabData/statenv/genmap.sml)
      Rehash*      elabdata.cm (ElabData/pickle/rehash.sml)
      
      BACKEND      (TopLevel/backend/backend.sig)
      CODE_GENERATOR  (TopLevel/main/code-generator.sig)
      CCONFIG      (TopLevel/main/cconfig.sig)
      Environment  (TopLevel/environ/environ.sml)

TopLevel/main/

  control.sig
    < CGCONTROL
      CONTROL
    > PRINTCONTROL*     basics.cm
      ELABDATA_CONTROL* elabdata.cm
      ELAB_CONTROL*     elaborate.cm
      FLINTCONTROL*     flint.cm
      BASIC_CONTROL*    basics.cm
      PARSER_CONTROL*   parser.cm

  control.sml
    < Control_CG
      Control
    > BasicControl*     basics.cm (Basics/control/basiccontrol.sml)  
      ControlRegistry*, ControlUtil*, Controls*  [smlnj-lib/Controls/]controls-lib.cm
      PRINTCONTROL*
      Control_Print*    basics.cm (Basics/print/printcontrol.sml)
      ELABDATA_CONTROL*
      ElabDataControl*  elabdata.cm (ElabData/main/edcontrol.sml)
      ELAB_CONTROL*     elaborate.cm (Elaborator/control/elabcontrol.sig)
      ElabControl*      elaborate.cm (Elaborator/control/elabcontrol.sml)
      FLINT_Control*    flint.cm (FLINT/main/control.sml)
      MC_CONTROL*       elaborate.cm (Elaborator/control/mccontrol.sig)
      MCControl*        elaborate.cm (Elaborator/control/mccontrol.sml)
      TDPInstrument*    debugprof.cm (DebugProf/profile/tdp-instrument.sml) 

      CGCONTROL   (TopLevel/main/control.sig)
      CONTROL     (TopLevel/main/control.sig)

  cconfig.sig
    < CCONFIG
    > PersStamps*       basics.cm  
      LambdaVar*        elabdata.cm
      Stamps*           elabdata.cm
      StaticEnv*        elabdata.cm

  code-generator.sig
    < CODE_GENERATOR
    > FLINT*            flint.cm
      CodeObj*          execute.cm (Execution/codeobj/code-obj.sml) 

  compile.sig
    < COMPILE0
      COMPILE
      TOP_COMPILE
    > PersStamps*       basics.cm
      Source*           basics.cm (Basics/source/source.sml)
      StaticEnv*        elabdata.cm
      LambdaVar*        elabdata.cm
      CompInfo*         elabdata.cm
      Ast*              parser.cm
      Absyn*            elabdata.cm
      CodeObj*          execute.cm (Execution/codeobj/code-obj.sml) 
      ImportTree*       execute.cm (Execution/main/importtree.sml)

  compile.sml
    < CompileF [fct]
    > LambdaVar*        elabdata.cm
      StaticEnv*        elabdata.cm
      Symbol*           basocs.cm
      Ast*              parser.cm
      Absyn*		elabdata.cm
      CompInfo*		elabdata.cm
      Stats*            basics.cm (Basics/stats/stats.sml)
      ElabTop*          elaborate.cm
      SpecialSymbols*   basics.cm (Basics/symbol/specialsyms.sml)
      SProf*            debugprof.cm (DebugProf/profile/sprof.sml)
      TProf*            debugprof.cm (DebugProf/profile/tprof.sml)
      TDPInstrument*    debugprof.cm (DebugProf/profile/tdp-instrument.sml) 
      Translate*        flint.cm
      FLINTOpt*         flint.cm
      CodeObj*          execute.cm (Execution/codeobj/code-obj.sml) 

      CODE_GENERATOR    (TopLevel/main/code-generator.sig)
      CCONFIG           (TopLevel/main/cconfig.sig)
      COMPILE0          (TopLevel/main/compile.sig)
      Control           (TopLevel/main/control.sml)

TopLevel/print/

  ppdec.sml
    < PPDEC
      PPDec
    > Symbol*	        basics.cm
      SymPath*          elabdata.cm 
      InvPath*          elabdata.cm 
      Access*           elabdata.cm
      Variable          elabdata.cm
      Absyn*            elabdata.cm
      LambdaVar*        elabdata.cm
      Types*            elabdata.cm
      Modules*		elabdata.cm
      PPTypes*          elabdata.cm
      PPSymbols*	basics.cm (Basics/symbol/ppsymbols.sml)
      PPSymPaths*       elabdata.cm
      PrettyPrint*      prettyprint-lib.cm
      Lookup*           elabdata.cm (ElabData/statenv/lookup.sml)
      Bindings*         elabdata.cm
      ErrorMsg*         basics.cm
      
      Environment       (TopLevel/environ/environ.sml)
      PPObj             (TopLevel/print/ppobj.sml)       
      Control		(TopLevel/main/control.sml)
      
  ppobj.sml
    < PPOBJ
      PPObj
    > PrettyPrint*      prettyprint-lib.cm
      Symbol*           basics.cm
      Access* 		elabdata.cm
      Types*		elabdata.cm
      TypesUtil*	elabdata.cm
      BasicTypes*	elabdata.cm
      Fixity		elabData.cm
      ErrorMsg*		basics.cm
      [Unsafe           basis.cm]

  pptable.sml
    < PPTABLE
      PPTable
    > ErrorMsg*         basics.cm
      SourceMap*	basics.cm 
      Symbol*           basics.cm 
      Stamps*           elabdata.cm
      SymPath*          elabdata.cm
      Types*            elabdata.cm
      PrettyPrint* 	prettyprint-lib.cm
    
  compilerpptable.sml
    < CompilerPPTable
    > PrettyPrint*      prettyprint-lib.cm
     
      PPTable           (TopLevel/print/pptable.sml)
    
  printhooks.sml
    < PrintHooks
    > StaticEnv*        elabdata.cm
      Absyn*            elabdata.cm
      PPAbsyn*          elabdata.cm


(* ---------------------------- Imports ---------------------------- *)

(* basics.cm: ErrorMsg, Symbol, SourceMap, PersStamps, ...
   elabdata.cm: PickMod, UnpickMod, Stamps, SymPath, InvPath,
                LambdaVar, Ast, Absyn, PPAbsyn, Types, Modules, GenModId, ...
   elaborate.cm: ElabDebug, ElabControl, MCControl, ...
   prettyprint-lib.cm: PrettyPrint
   execute.cm: CodeObj, DynamicEnv, ImportTree, Isolate, Execute
   basis.cm: Time, SMLofNJ, Unsafe, General, OS 
   smlnj-lib.cm (smlnj-lib/Util): PropList, ...
*)

(* viscomp *)
$smlnj/viscomp/basics.cm     (or, $compiler/Basics/basics.cm)
$smlnj/viscomp/elabdata.cm   (or, $compiler/ElabData/elabdata.cm)
$smlnj/viscomp/elaborate.cm  (or, $compiler/Elaborator/elaborate.cm)
$smlnj/viscomp/execute.cm    (or, $compiler/Execution/execute.cm)

(* Basis *)
$smlnj/basis/basis.cm  (* Time, SMLofNJ, Unsafe, General  *)

(* smlnj-lib "incorporated" libraries *)
$smlnj/smlnj-lib/smlnj-lib.cm
$smlnj/smlnj-lib/controls-lib.cm
$smlnj/smlnj-lib/prettyprint-lib.cm

