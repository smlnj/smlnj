compiler/Backend/MAP-backend-amd64.txt

Map of compiler/backend-amd64.cm

compiler/Backend

CDF: compiler/Backend/backend-amd64.cm
  Derived: system/smlnj/viscomp/amd64.cm

(* ---------------------------- Exports ---------------------------- *)

structure Arm64Backend

(* ---------------------------- Module Catalogue ---------------------------- *)

LOCAL:

Arm64Backend		Backbackend/arm64-backend.sml


IMPORTS:

BackendFn	      	TopLevel/backend/backend-fn.sml

CodeGeneratorFn		CodeGen/main/code-gen-fn.sml
DefaultMachSpecFn	CodeGen/main/default-machspec-fn.sml

Arm64Spec		CodeGen/targets/arm64-spec.sml 


(* ---------------------------- Members [files] ---------------------------- *)

Backend/
backend/

  arm64-backend.sml
    < ARM64Backend
    > ----------
      BackEndFn
      CodeGeneratorFn
      Arm64Spec


(* ---------------------------- Imports ---------------------------- *)

(* Basis *)
$smlnj/basis/basis.cm

$smlnj/viscomp/toplevel.cm (* BackendFn *)
$smlnj/viscomp/codegen.cm  (* CodeGeneratorFn, DefaultMachSpecFn, Arm64Spec *)


(* ---------------------------- Notes ---------------------------- *)

TopLeve/backend could be moved into CodeGen (NewCodeGen). Then this
CDF would depend only on codegen.cm (or viscomp/codegen.cm?). There is no need
to pass these modules (functors) through core.cm.  Then the imports would
covered by codegen.cm alone.

Alternatively, we could create a new top-level component, "Backend",
with its own CDF backend.cm, (or backend-amd64.cm and backend-arm64.cm).
Or two top-level components (?) Arm64Backend and AMD64Backend, with
respective CDFs backend-arm64.cm and backend-amd64.cm.

Might be best to split BackendFn into three, one each for Compile, Interact,
and Profile. Especially if we can isolate the compile functionality for CM
from the interactive system functionality (Interact).

