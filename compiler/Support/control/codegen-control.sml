(* Admin/control/codegen-control.sml
 *
 * COPYRIGHT (c) 2023 The Fellowship of SML/NJ (https://www.smlnj.org)
 * All rights reserved.
 * 
 * Code generation controls for the CodeGen library (including some used in FLINT?)
 *)

structure CodeGenControl : CODEGEN_CONTROL =
struct

  val closureStrategy = ref 0 (* "closure strategy" -- see CPS/clos/closure.sml *)
  val cpsopt = ref ["first_contract", "eta", "zeroexpand", "last_contract"] (* "cps optimizer phases" *)
      (* or? ["first_contract", "eta", "uncurry", "etasplit", "cycle_expand", "eta", "last_contract"] *)
  val rounds = ref 10 (* "max # of cpsopt rounds" *)
  val path = ref false (* "path?" *)
  val betacontract = ref true (* "betacontract?" *)
  val eta = ref true (* "eta?" *)
  val selectopt = ref true (* "enable contraction of record select" *)
  val dropargs = ref true (* "dropargs?" *)
  val deadvars = ref true (* "deadvars?" *)
  val flattenargs = ref false (* "flattenargs?" *)
  val extraflatten = ref false (* "extraflatten?" *)
  val switchopt = ref true (* "switchopt?" *)
  val handlerfold = ref true (* "handlerfold?" *)
  val branchfold = ref false (* "branchfold?" *)
  val arithopt = ref true (* "arithopt?" *)
  val betaexpand = ref true (* "betaexpand?" *)
  val unroll = ref true (* "unroll?" *)
  val invariant = ref true (* "invariant?" *)
  val lambdaprop = ref false (* "lambdaprop?" *)
  val refconreps = ref true (* "refconreps?" *)
  val boxedconstconreps = ElabDataControl.boxedconstconreps (* where does it belong? *)
  val unroll_recur = ref true (* "unroll-recur?" *)
  val sharepath = ref true (* "sharepath?" *)
  val staticprof = ref false (* "staticprof?" *)
  val verbose = ref false (* "verbose?" *)
  val debugcps = ref false (* "debugcps?" *)
  val bodysize = ref 20 (* "bodysize?" *)
  val reducemore = ref 15 (* "reducemore?" *)
  val comment = ref false (* "comment?" *)
  val knownGen = ref 0 (* "known-gen?" *)
  val knownClGen = ref 0 (* "known-cl-gen?" *)
  val escapeGen = ref 0 (* "escape-gen?" *)
  val calleeGen = ref 0 (* "callee-gen" *)
  val spillGen = ref 0 (* "spill-gen?" *)
  val etasplit = ref true (* "etasplit?" *)
  val uncurry = ref true (* "enable uncurrying optimization" *)
  val ifidiom = ref true (* "enable if-idiom optimization" *)
  val comparefold = ref true (* "enable optimization of conditional tests" *)
  val debugLits = ref false (* "print results of literal lifting" *)
  val refLiterals = ref false (* "use ref literal representation" *)
  val debugRep = ref false (* "debug-rep?" *)
  val deadup = ref true (* "deadup?" *)
  val printit = ref false (* "whether to show CPS" *)
  val printClusters = ref false (* "whether to print clusters prior to codegen" *)
  val printCFG = ref false (* "whether to convert to CFG and print it"*)
  val dumpCFG = ref false (* "whether to convert to CFG and pickle it" *)
  val useLLVM = ref true (* "whether to use the LLVM code generator" *)
  val debugSpill = ref false (* "enable CPS spill debugging" *)
  val debugSpillInfo = ref false (* "enable CPS spill info" *)

end (* structure CodeGenControl *)
