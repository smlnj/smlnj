smlnj[newpp]/notes/smlnj-lib.txt

How to configure CM so that smlnj-lib/PrettyPrint gets compiled and is accessible
(via something like $smlnj/smlnj-lib/prettyprint-lib.cm, and by autoloading).

The idea is that PP and PrettyPrint will co-exist in smlnj-lib. If NEWPP becomes
accessible as a component of smlnj-lib (along with smlnj-lib/PP), then the
copy in smlnj[newpp]/compiler/Basics/newpp can be removed.

1. Added system/smlnj/smlnj-lib/newpp-lib.cm, a modified version of
   pp-lib.cm in the same directory that refers to smlnj-lib/NEWPP instead
   of smlnj-lib/PP (and NEWPP/newpp-lib.cm in place of PP/pp-lib.cm).
   [Q: why do we need (all)the bind: specifications in this cm description
   file?]

2. system/pathconfig: it looks like this does not need to be changed,
   because it does not define a root for the prettyprinter library.

3. Remove Basics/newpp entries from Basics/basics.cm (don't want to
   have duplicate sources loaded from Basics/basics.cm and
   system/smlnj/smlnj-lib/newpp-lib.cm.

3. What would cause the following path to be defined (perhaps as an alias for
   $smlnj/smlnj-lib/prettyprint-lib.cm)?

     $/prettyprint-lib.cm

   [There are a number of other instances of "short" paths similar to this,
    but I am not sure how they are defined.]
   Does this have something to do with the system/smlnj/smlnj-lib/prettyprint-lib.cm
   file?

4. Renaming:
   NewPP -> PrettyPrint
   smlnj-lib/NEWPP -> smlnj-lib/PrettyPrint
   smlnj-lib/NEWPP/newpp-lib.cm -> smlnj-lib/PrettyPrint/prettyprint-lib.cm

   New:
   system/smlnj/smlnj-lib/prettyprint-lib.cm
     (aliases smlnj-lib/PrettyPrint/prettyprint-lib.cm?)

   Edit:
   compiler/Basics/basics.cm
     $smlnj/smlnj-lib/pp-lib.cm  ->
       $smlnj/smlnj-lib/prettyprint-lib.cm  [$smlnj = system/smlnj]

4. Remove PrettyPrint from various compiler .cm files in system/smlnj/compiler
   (this was originally refering to the Basics/print/prettyprint.sml structure,
    making it visible at top level. These cm files were modified so now it is the
    new PrettyPrint structure that is visible at top level.)
     
5. Make PrettyPrint autoloadable?

6. Any things need to be changed in system/smlnj/viscomp? (e.g. delete PrettyPrint
   made available through basics.cm).

7. Add something like

     $smlnj/smlnj-lib/prettyprint-lib.cm

   To all the subdirectory cm files like Basics/basics.cm, ElabData/elabdata.cm,
   Elaborate/elaborate.cm, etc. where the PrettyPrint structure is referred to
   (e.g. in file ElabData/modules/ppmod.sml). This would make PrettyPrint available
   to those files that refer to PrettyPrint:

     Basics/basics.cm
       errormsg/errormsg.sml
       errormsg/pperrormsg.sml
       source/ppsourcemap.sml
       symbol/ppsymbols.sml

     CPS: core.cm (cps.cm?)
       cps/ppcps.sml

     ElabData/elabdata.cm
       basics/ppsympaths.sml
       modules/ppmod.sml
       modules/ppmod-db.sml
       prim/ppprim.sml
       syntax/ppabsyn.sml
       syntax/ppval.sml
       types/pptype.sml

     Elaborator/elaborate.cm
       elaborate/elabdebug.sml
       elaborate/elabmod.sml
       elaborate/elabtop.sml
       elaborate/elabutil.sml
       matchcomp/mcprint.sml
       matchcomp/ppmatchcomp.sml
       matchcomp/generate.sml
       matchcomp/mcpp.sml
       matchcomp/protoandor.sml
       types/overload.sml
       types/typecheck.sml
       types/unify.sml

     FLINT: core.cm (no flint.cm? why?)
       flint/chkflint.sml
       flint/chkflint-named.sml
       flint/ppflint.sml
       kernel/ltydef.sml
       kernel/ltyextern.sml
       kernel/ltykernel.sml
       kernel/ltykindchk.sml
       kernel/pplty
       opt/collect.sml
       opt/fcontract.sml
       opt/fixfix.sml
       opt/specialize.sml
       plambda/chkplexp.sml
       plambda/flintnm.sml
       plambda/pplexp.sml
       reps/wrapping.sml
       trans/pequal.sml
       trans/translate.sml

     Parse: parser.cm
       ast/ppast.sml

     TopLevel: core.cm (no toplevel.cm? why?)
       environ/environ.sml
       interact/evalloop.sml
       print/compilerpptable.sml
       print/ppdec.sml
       print/ppobj.sml
       print/pptable.sml
       print/printhooks.sml
       
   Also there are a few files in cm that use PrettyPrint:

     compile/compile.sml
     compile/link.sml
     depend/build.sml
     depend/checksharing.sml
     main/general-params.sml
     parse/parse.sml
     stable/stabilize.sml

   So this requires modifiction of some cm configuration files.


8. First attempt to switch over to smlnj-lib/PrettyPrint.

  [After already having added system/smlnj-lib/prettyprint-lib.cm.]

  a. Comment out PrettyPrint in system/smlnj/compiler and system/smlnj/viscomp cm
     files. [What about CompilerPPTable?]

     This means PrettyPrint (from compiler/Basics/PrettyPrint) is not included in the
     top-level environment.
     ++ Done

  b. Add line

        $smlnj/smlnj-lib/prettyprint-lib.cm

     to the cm configuration files listed in point 7 above.

     Uncomment the $smlnj/smlnj-lib/prettyprint-lib.cm line in compiler/Basics/basics.cm
     This makes the smlnj-lib/PrettyPrint bindings available within Basics.
     (actually part of b. above)
     ++ added to: basics.cm, core.cm (covers CPS, TopLevel), elabdata.cm, elaborate.cm,
        and parser.cm

  c. Comment out the prettyprint/* files in compiler/Basics/basics.cm. 
     This means that files in Basics/prettyprint will not be compiled and are
     therefore redundant (and that directory should be removed after finding
     new homes for the doc files).
     ++ Done

  d. Comment out the "structure PrettyPrint = PrettyPrint" declaration in
     system/smlnj/compiler/compiler.sml.

  e. Check what needs to change in system/pathconfig and config/extrapathconfig
     [Why are there two separate pathconfig files? Could config/extrapathconfig
      be merged into system/pathconfig? How are these files related to lib/pathconfig?]
     [Do we need to define any new path roots, like $smlnj?]
     ++ added line

        prettyprint-lib.cm smlnj/smlnj-lib

     to config/extrapathconfig. [What does that do?]
     
  f. Try compiling the compiler.  Problems:
     (1) system/smlnj/compiler/compiler.sml fails because of unbound PrettyPrint.
         ++ FIX: comment out PrettyPrint declaration in compiler.sml
     (2) ./cmb-make ../bin/sml was successful, but ./build.sh failed:
     
/Users/dbm/sml/Dev/github/smlnj/smlnj-lib/PP/pp-extras-lib.cm:36.3-36.14 Error: Io: openIn failed on "/Users/dbm/sml/Dev/github/smlnj/lib/smlnj/smlnj-lib/pp-lib.cm", No such file or directory
FAILURE: stabilization of libraries failed
./build.sh: !!! ./build.sh: !!! Installation of libraries and programs failed.

  ++ At this point, all the subdirectories of lib/smlnj are empty! So indeed,
     there is no file lib/smlnj/smlnj-lib/pp-lib.cm.
     So when are these directories supposed to be populated?
  ++ Tried deleting smlnj/lib directory, tarring up system/sml.boot.amd64-unix
     to get a new boot.amd64-unix.tgz and moving that to the root directory (smlnj).
     No change. The subdirectories of lib/smlnj remain empty.

  g. Figure out how to register smlnj-lib/PrettyPrint for autoloading.
     [Where and how is this done?]


More Questions
--------------

* Where does the path $/pickle-lib.cm (used in core.cm) get defined? 
The pickle-lib.cm file is at compiler/Library/pickle/pickle-lib.cm.
It looks like this is defined by the pickle-lib.cm line in system/pathconfig.
So does the prettyprint-lib.cm line in config/extrapathconfig define
the path $/prettyprint-lib.cm ?

* How many of the bind: declarations in (for instance)
system/smlnj/smlnj-lib/prettyprint-lib.cm are necessary? Why?
Are they needed, or are they there pro-forma?


