~/sml/Dev/github/smlnj/notes/install.txt  [newpp branch of smlnj]

Notes on smlnj install process and files
----------------------------------------

Trying to understand the install process in order to trouble-shoot the problem of
adding smlnj-lib/prettyprint without breaking the build process.

------------------------------------------------------------------------------------------
1. Catalog of files (involved in build?):
------------------------------------------------------------------------------------------

Note: all filenames/paths are relative to the SML/NJ ROOT directory
      (e.g. ~/sml/Dev/github/smlnj in my case, which is a GitHub clone of the newpp branch
       of the smlnj/smlnj repository)

build.sh [:shell]
  - the main (top-level) build script

config/ [:dir]
  actions [:txt/config]
  dependencies [:txt/config]
  extrapathconfig [:txt/config]
  targets [:txt/config]
  releasedate [:txt/config]
    - contents is release date (a string), e.g "August 25, 2022\n"

system/ [:dir]
  README [:txt/doc] ("Compiler Hacker's Guide to new CM...")

  cmb-make  [:shell]
  makeml    [:shell]
  installml [:shell]
  cmb-cross [:shell]
  all-cross [:shell]
  iter-make [:shell]
  testml    [:shell]  

  pathconfig [:txt/config]  (CM path definitions)
  preloads.bare [:txt/config] (autoload declarations?)
  preloads.standard [:txt/config] (autoload declarations?)
  root.cm [:CM desc]

  batchcomp.sml [:sml]
  serv.sml  [:sml]
  rserv.sml [:sml]
  tserv.sml [:sml]

  sml.bin.amd64-unix/ [:dir]
  sml.boot.amd64-unix/ [:dir] (compiled code]

system/smlnj/ [:dir]

  smlnj-lib/ [:dir]
     controls-lib.cm [:CM desc]
     pp-lib.cm [:CM desc]
     prettyprint-lib.cm [:CM desc]
     smlnj-lib.cm [:CM desc]

  cm.cm
  cm/ [:dir]
    cm.cm
      - something wierd related to pickling and sequencing
  cmb.cm
  cmb/ [:dir]

  init/ [:dir]
    init.cmi [:CM cmi]
    (24 sml files related to: initialization of (pervasiv environment?), ml-nlffi)

  installer.cm [:CM desc]
  library-install.cm 
  installer/ [:dir]
    util.cm [:CM desc]
    installer-util.sml [:sml}
      - defines "fail" function, which prints "FAILURE:" messages
    patch-file.sml [:sml}
    generic-install.sml [:sml}
      - generates error messages like
          "FAILURE: Built ml-ulex; ml-ulex.amd64-darwin still missing"
      - generates messages like
          "Library <libname> already existed in <file path>"
    library-install.sml [:sml}
    nix-install.sml [:sml}
    win-install.sml [:sml}

  internal/ [:dir]
    cm0.cm
      - appears in ../cm/cm.cm 
    cm-lib.cm [:CM desc]
    cm-sig-lib.cm [:CM desc]
      - appears in ../cm/cm.cm 

    versiontool.cm
    smlnj-version.cm
    version.sml [:sml] (defines buildData, releaseDate, version, banner)
    version.template [:sml]  (template for building version.sml)
    versiontool.sml [:sml]

    srcpath-lib.cm
    
    intsys.cm
    int-sys.sml

  compiler.cm [:CM desc]
  compiler/ [:dir]
    all.cm [:CM desc]
    amd64.cm  [:CM desc]
    amd64.sml [:sml]
    arm64.cm  [:CM desc]
    arm64.sml [:sml]
    compiler.cm [:CM desc]
    compiler.sml [:sml]
    current.cm [:CM desc]
    minimal.cm [:CM desc]
    minimal-only.cm [:CM desc]
    minimal-compiler.sml [:sml]
    
  viscomp/ [:dir]
    amd64.cm [:CM desc]
    arm64.cm [:CM desc]
    core.cm [:CM desc] 
    basics.cm [:CM desc]
    debugprof.cm [:CM desc]
    elabdata.cm [:CM desc]
    elaborate.cm [:CM desc]
    execute.cm [:CM desc]
    parser.cm [:CM desc]

  basis/ [:dir]
    ...
  asdl/ [:dir]
    ...

system/Basis/ [:dir]
  basis.cm [:CM desc]
  basis-common.cm  [:CM desc]

  Exports/ [:dir]
  TypesOnly/ [:dir]
  Implementation/ [:dir]
    - Basis source code

lib/ [:dir]
  pathconfig [:txt/config]
    - how derived? Relation to system/pathconfig and config/extrapathconfig?
    - why repeated lines?
  pp-lib.cm/ [:dir] (e.g.)
    .cm/ [:dir]
      amd64-unix/ [:dir]
        pp-lib.cm [:binary?, 69089 bytes] 
      
bin/ [:dir]
  .arch-n-opsys [:shell]
  .run-sml [:shell]
  .link-sml [:shell]
  .heap/ [:dir]
    sml.amd64-darwin [:heap image]
    ml-yacc.amd64-darwin [:heap image]
    ml-burg.amd64-darwin [:heap image]
    ...
  .run/ [:dir]
    run.amd64-darwin [:x86-64 executable]

  ml-build [:shell]  
    - script for building stand-alone programs (e.g. ml-yacc), (using SMLofNJ.exportFn)
    - documented in CM Manual, Section 15
  ml-makedepend [:shell]  
  heap2exec [:shell]  

  sml [:symlink] ( -> .run-sml) 
  ml-yacc [:symlink] ( -> .run-sml) 
  ml-burg [:symlink] ( -> .run-sml) 
  ...

[Q] Why is .link-sml hidden and ml-build not hidden?
    Is .link-sml ever used independently of ml-build?
    Does ml-build ever use other values of $LINK?

-----------
Note: where do the compiled binary files live?

(1) system/sml.boot.amd64-unix
    (binary files for the compiler itself?)
    [description of contents
     per-library binary files?]

(2) system/sml.bin.amd64-unix
    [description of contents -- redundant?
     per-source file binary files?]

(2) in .cm directories in source directories [for libraries and tools
    These .cm directories contain three subdirectories:
      - GUID/
      - SKEL/
      - amd64-unix/
    The adm64-unix subdirectory contains one binary file per
    source file, with the same names (!) as the source files.

    E.g. smlnj/smlnj-lib/PP/src/.cm
    E.g. smlnj/tools/ml-lpt/ml-ulex/.cm 
    E.g. smlnj/tools/ml-lpt/ml-ulex/BackEnds/.cm 

[Q] Why do we need both sml.bin and sml.boot?
[Q] Is sml.bin just used to build sml.boot and is thereafter redundant?


------------------------------------------------------------------------------------------    
2. build.sh  (shell script)
------------------------------------------------------------------------------------------    
What happens in build.sh?



---------------------
Comments, bugs, fixes

* Redundancy between complain and arguments of complain. Both printing "$cmd !!!", so
error messages start with, e.g. "./build.sh !!! ./build.sh !!! ...".
[Fixed]


------------------------------------------------------------------------------------------    
3. bin/ml-build  (shell script)
------------------------------------------------------------------------------------------    
What happens in ml-build?


------------------------------------------------------------------------------------------    
2. bin/.link-sml (shell script)
------------------------------------------------------------------------------------------    
What happens in .link-sml?  [and why isn't it just bin/link-sml? or bin/ml-link?]

Why does it need to be a separate script from bin/ml-build? Could bin/ml-build and
bin/.link-sml be merged into a single script?





