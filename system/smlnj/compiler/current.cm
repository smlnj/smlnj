(* $smlnj/compiler/current.cm
 *
 * COPYRIGHT (c) 2023 The Fellowship of SML/NJ (http://www.smlnj.org)
 * All rights reserved.
 *
 * Library exporting "visible compiler" structures
 * and Backend (for the current architecture).
 * No local members (source files) other than $smlnj/compiler/amd64.sml or arm64.sml.
 *
 * [DBM: why this particular selection of compiler Modules? What can one do with them?]
 *
 * author: Matthias Blume (matthias.blume@gmail.com)
 *)

(cm-init)
Library

  (* re-exporting modules, or "pass-throughs" from $smlnj/compiler/amd64.cm or arm64.cm *)

  (* Support stuff (currently from Basics) *)
  structure Stats
  structure Source
  structure SourceMap
  structure ErrorMsg
  structure CompileExn (* Basics/compiler/compileexn.sml *)

  (* Basic = Basics + ElabData/basics *)
  structure Symbol     (* Basics/symbol *)
  structure SymPath    (* ElabData/basics *)
  structure Stamps     (* ElabData/basics *)
  structure PersStamps (* Basics/pid/ *)
  structure Access     (* ElabData/basics *)
  structure CoreSym    (* ElabData/basics *)

  (* ElabData/main *)
  structure CompInfo

  (* ElabData/statenv *)
  structure Bindings
  structure StaticEnv
  structure GenModIdMap

  (* ElabData/prim *)
  structure PrimopId

  (* syntax -- from Parse & ElabData *)
  structure Ast      (* Parse/ast *)
  structure Absyn    (* ElabData/syntax *)
  structure Variable (* ElabData/syntax *)

  (* Parse *)
  structure SmlFile

  (* ElabData/types, ElabData/modules *)
  structure Types
  structure TypesUtil
  structure BasicTypes
  structure PPType
  structure EntityEnv
  structure Modules
  structure ModuleUtil
  structure ModuleId

  (* ElabData/pickle  *)
  structure PickleSymPid
  structure UnpickleSymPid
  structure Rehash
  structure PickMod
  structure UnpickMod

  (* Execution (execute.cm) *)
  structure Binfile    (* binfile/ *)
  structure DynamicEnv (* dynenv/ *)

  (* FLINT *)
  structure FLINT

  (* TopLevel *)
  structure Control
  structure CompilerPPTable
  structure PrintHooks
  structure Environment
  structure EnvRef

  (* smlnj-version.cm *)
  structure SMLNJVersion

  (* the current backend *)
  structure Backend

is
(* members/imports *)

# if defined(ARCH_AMD64)
       amd64.sml (* Backend *)
       $smlnj/compiler/amd64.cm (* = ./amd64.cm *)
# elif defined(ARCH_ARM64)
       arm64.sml (* Backend *)
       $smlnj/compiler/arm64.cm (* = ./arm64.cm *)
# else
#   error Strange architecture!
# endif
